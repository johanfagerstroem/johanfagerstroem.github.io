<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Johan Fagerström | Tech and Recreation</title>
    <link>https://johanfagerstroem.github.io/posts/</link>
    <description>Recent content in Posts on Johan Fagerström | Tech and Recreation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 06 Mar 2023 09:11:47 +0000</lastBuildDate><atom:link href="https://johanfagerstroem.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PKCS11 support in Microsoft Edge and Google Chrome</title>
      <link>https://johanfagerstroem.github.io/2023/configure-libnss-for-pkcs11/</link>
      <pubDate>Mon, 06 Mar 2023 09:11:47 +0000</pubDate>
      
      <guid>https://johanfagerstroem.github.io/2023/configure-libnss-for-pkcs11/</guid>
      <description>Introduction Following up on the post I wrote on using using virtual smartcards (in the shape of Yubikeys) in Firefox for secure hardware-backed client certificate authentication. There is now a way to configure Google Chrome and Microsoft Edge on Linux to support the same workflow.
Both Google Chrome and Microsoft Edge are based on Chromium, which under the hood makes use of Mozilla NSS (libnss) for network communication. NSS does have support for PKCS11 modules, and can easily be configured with the official PKCS11 module from Yubico as described in the previous post.</description>
    </item>
    
    <item>
      <title>HTTPS client certificates using Yubikeys</title>
      <link>https://johanfagerstroem.github.io/2021/https-client-certificates-with-yubikeys/</link>
      <pubDate>Tue, 21 Sep 2021 10:49:47 +0000</pubDate>
      
      <guid>https://johanfagerstroem.github.io/2021/https-client-certificates-with-yubikeys/</guid>
      <description>Introduction tl;dr This post covers setting up Caddy as a reverse proxy, and configure it to perform client certificate validation (a.k.a. mTLS). In addition to this, the post covers storing the client certificate and the private key securely on a Yubikey (acting as a virtual PIV smart card).
I wasn&amp;rsquo;t able to find a similar quickstart tutorial on the internet, therefore I&amp;rsquo;m writing this one. I have absolutely zero affiliation with Yubico or Caddy; I just enjoy mucking about with their products and tools as they are really one step closer to ItJustWorks(TM) than several other solutions.</description>
    </item>
    
    <item>
      <title>That first post</title>
      <link>https://johanfagerstroem.github.io/2019/first-post/</link>
      <pubDate>Thu, 31 Oct 2019 18:49:47 +0000</pubDate>
      
      <guid>https://johanfagerstroem.github.io/2019/first-post/</guid>
      <description>So, I got the idea that I should start writing down whatever I do that may be of any help to others. Every now and then, I find myself in the situation of a technical problem that just doesn&amp;rsquo;t seem to have a solution indexed in any search engine or community, and I&amp;rsquo;ll have to solve it on my own. That is one example of what I will write about here.</description>
    </item>
    
  </channel>
</rss>
